#!/bin/bash

fmy_file="${BASH_SOURCE[0]}"
fmy_dir="$(dirname $fmy_file)"

# check juju version
jver="$(juju --version | cut -d . -f 1)"
if [[ $jver != '2' ]] ; then
  echo "ERROR: Juju version 2 is only supported"
  exit 127
fi

function juju-status() {
  timeout -s 9 30 juju status $juju_model_arg --format yaml $@
}

function juju-status-json() {
  timeout -s 9 30 juju status $juju_model_arg --format json $@
}

function juju-status-tabular() {
  timeout -s 9 30 juju status $juju_model_arg --format tabular $@
}

function juju-machines-tabular() {
  timeout -s 9 30 juju machines $juju_model_arg --format tabular $@
}

function juju-deploy() {
  juju deploy $juju_model_arg "$@"
}

function juju-add-unit () {
  juju add-unit $juju_model_arg "$@"
}

function juju-expose () {
  juju expose $juju_model_arg "$@"
}

function juju-add-relation () {
  juju add-relation $juju_model_arg "$@"
}

function juju-ssh () {
  juju ssh $juju_model_arg "$@"
}

function juju-scp () {
  juju scp $juju_model_arg "$@"
}

function juju-add-machine () {
  juju add-machine $juju_model_arg "$@"
}

function juju-remove-machine () {
  juju remove-machine $juju_model_arg "$@"
}

function juju-set() {
  juju config $juju_model_arg "$@"
}

function juju-get() {
  local value=`juju config $juju_model_arg $1 | grep -v "^      " | grep -A 4 " $2:"`
  if echo "$value" | grep -q "value:" ; then
    echo "$value" | grep "value:" | awk '{print $2}'
  else
    echo "$value" | grep "default:" | awk '{print $2}'
  fi
}

function get_machine_ip() {
  local service=$1
  juju status $juju_model_arg $service --format tabular | grep "$service/" | head -1 | awk '{print $5}'
}

function get_machine_ip_by_machine() {
  juju machines $juju_model_arg | grep "^$1" | head -1  | awk '{print $3}'
}

function get_machine_by_ip() {
  local ip=$1
  juju machines $juju_model_arg | grep " $ip " | head -1  | awk '{print $1}'
}

function wait_absence_status_for_services() {
  sleep 10
  check_str=$1
  local max_iter=${2:-30}
  # waiting for services
  local iter=0
  while juju-status | grep -P $check_str &>/dev/null
  do
    echo "Waiting for all service to be active - $iter/$max_iter"
    if ((iter >= max_iter)); then
      echo "ERROR: Services didn't up."
      juju-status-tabular
      return 1
    fi
    if juju-status | grep "current" | grep error ; then
      echo "ERROR: Some services went to error state"
      juju-status-tabular
      return 1
    fi
    local merr=`juju-status-json | python -c "import sys; import json; ms = json.load(sys.stdin)['machines']; [sys.stdout.write(str(m) + '\n') for m in ms if (ms[m]['juju-status']['current'] == 'down' and ms[m]['instance-id'] == 'pending')]"`
    if [ -n "$merr" ] ; then
      echo "ERROR: Machines went to down state: "$merr
      juju-status
      return 1
    fi
    sleep 30
    ((++iter))
  done
}

function wait_for_machines() {
  # wait for machines
  sleep 30
  for machine in $@ ; do
    echo "Waiting for machine: $machine"
    local fail=0
    while ! output=`juju-ssh $machine "sudo apt-get install -fy joe mc" 2>/dev/null` ; do
      if ((fail >= 60)); then
        echo "ERROR: Machine $machine did not up."
        echo $output
        return 1
      fi
      sleep 10
      ((++fail))
      if echo "$machine" | grep -q '/lxd/' ; then
        # lxd container case
        local mch=`echo "$machine" | cut -d '/' -f 1`
        local status=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$mch']['containers']['$machine']['juju-status']['current'])"`
        local iid=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$mch']['containers']['$machine']['instance-id'])"`
      else
        local status=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$machine']['juju-status']['current'])"`
        local iid=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$machine']['instance-id'])"`
      fi
      if [[ "$status" == "down" && "$iid" == "pending" ]] ; then
        echo "ERROR: Machine $machine went to 'down' state."
        juju-status
        return 1
      fi
    done
    while ! juju-ssh $machine uname -a 2>/dev/null ; do
      echo "WARNING: Machine $machine isn't accessible"
      sleep 2
    done
  done
}

function wait_for_all_machines() {
  wait_for_machines `juju-machines-tabular | tail -n +2 | awk '{print $1}'`
}

function create_stackrc() {
  local auth_ip=`get_machine_ip keystone`
  local proto="http"
  local kver=`juju-get keystone preferred-api-version`
  echo "INFO: detected keystone version is $kver"
  echo "# created by CI" > $WORKSPACE/stackrc
  if [[ "$kver" == '3' ]] ; then
    echo "export OS_AUTH_URL=$proto://$auth_ip:5000/v3" >> $WORKSPACE/stackrc
    echo "export OS_IDENTITY_API_VERSION=3" >> $WORKSPACE/stackrc
    echo "export OS_PROJECT_DOMAIN_NAME=admin_domain" >> $WORKSPACE/stackrc
    echo "export OS_USER_DOMAIN_NAME=admin_domain" >> $WORKSPACE/stackrc
  else
    echo "export OS_AUTH_URL=$proto://$auth_ip:5000/v2.0" >> $WORKSPACE/stackrc
    echo "export OS_IDENTITY_API_VERSION=2" >> $WORKSPACE/stackrc
  fi
  echo "export OS_USERNAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_TENANT_NAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_PROJECT_NAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_PASSWORD=${PASSWORD:-password}" >> $WORKSPACE/stackrc
}

function post_deploy() {
  echo "INFO: Waiting for services start: $(date)"

  if ! wait_absence_status_for_services "executing|blocked|waiting" 45 ; then
    echo "ERROR: Waiting for services end: $(date)"
    return 1
  fi
  echo "INFO: Waiting for services end: $(date)"

  # check for errors
  if juju-status | grep "current" | grep error ; then
    echo "ERROR: Some services went to error state"
    return 1
  fi

  juju-status-tabular
}
